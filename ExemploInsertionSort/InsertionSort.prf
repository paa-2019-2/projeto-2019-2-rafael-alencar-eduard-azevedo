(ISort
 (insert_TCC1 0
  (insert_TCC1-1 nil 3780340935 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (cinsert_TCC1 0
  (cinsert_TCC1-1 nil 3780340989 ("" (subtype-tcc) nil nil) nil nil))
 (cinsert_TCC2 0
  (cinsert_TCC2-1 nil 3780340989 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (cinsert_length 0
  (cinsert_length-1 nil 3781550316
   ("" (skeep)
    (("" (measure-induct "length(lc`1)" ("lc"))
      (("" (skeep)
        (("" (expand "cinsert" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide -2)
                (("1" (expand "length" 1 1) (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (expand "length" 1 1) (("2" (propax) nil nil))
                  nil))
                nil)
               ("3" (expand "length" 2 1)
                (("3" (inst?)
                  (("3" (split)
                    (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                     ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cinsert def-decl "[list[nat], nat]" ISort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (count_cinsert_ws 1
  (count_cinsert_ws-2 "sem o grind" 3780775889
   ("" (skeep)
    (("" (induct "l")
      (("1" (flatten)
        (("1" (expand "length" 1)
          (("1" (expand "cinsert" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "length" 1)
          (("2" (expand "cinsert" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2)
                  (("1" (reveal -1)
                    (("1" (hide -1)
                      (("1" (inst -2 "0")
                        (("1" (assert)
                          (("1" (expand "nth") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (assert)
                            (("2" (expand "length")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2) (("2" (assert) nil nil)) nil)
                 ("3" (inst -2 "0")
                  (("1" (expand "nth" -2) (("1" (grind) nil nil)) nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "length") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (skeep)
                    (("4" (inst -1 "i+1")
                      (("1" (grind) nil nil)
                       ("2" (expand "length" 1)
                        (("2" (hide-all-but 1)
                          (("2" (typepred "i") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (count_cinsert_ws-1 nil 3780342089
   ("" (skeep)
    (("" (induct "l")
      (("1" (flatten)
        (("1" (expand "length" 1)
          (("1" (expand "cinsert" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "length" 1)
          (("2" (expand "cinsert" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2)
                  (("1" (reveal -1)
                    (("1" (hide -1)
                      (("1" (inst -2 "0")
                        (("1" (assert)
                          (("1" (expand "nth") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (assert)
                            (("2" (expand "length")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2) (("2" (assert) nil nil)) nil)
                 ("3" (inst -2 "0")
                  (("1" (expand "nth" -2) (("1" (grind) nil nil)) nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "length") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (skeep)
                    (("4" (inst -1 "i+1")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cinsert def-decl "[list[nat], nat]" ISort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (count_cinsert_ws_general 0
  (count_cinsert_ws_general-1 nil 3781551908
   ("" (skeep)
    (("" (measure-induct "length(lc`1)" ("lc"))
      (("" (skeep)
        (("" (expand "cinsert" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (hide -2) (("1" (grind) nil nil)) nil)
               ("2" (hide -2)
                (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil)
               ("3" (inst?)
                (("3" (split)
                  (("1" (lemma "le_cut")
                    (("1"
                      (inst -1 "1 + cinsert(x, (cdr(x_1`1), x_1`2))`2"
                       "1 + x_1`2 + length(cdr(x_1`1))"
                       "length(x_1`1) + x_1`2")
                      (("1" (split)
                        (("1" (propax) nil nil)
                         ("2" (hide 2 3 4) (("2" (assert) nil nil))
                          nil)
                         ("3" (hide -1 2 3) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<= const-decl "bool" reals nil)
    (cinsert def-decl "[list[nat], nat]" ISort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (le_cut formula-decl nil extra_real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   shostak))
 (insertion_sort_TCC1 0
  (insertion_sort_TCC1-1 nil 3780342081 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (cinsertion_sort_TCC1 0
  (cinsertion_sort_TCC1-1 nil 3780342081 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (cinsertion_sort_TCC2 0
  (cinsertion_sort_TCC2-1 nil 3780342081 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cinsertion_sort_length 0
  (cinsertion_sort_length-1 nil 3781550844
   ("" (induct "l")
    (("1" (expand "cinsertion_sort") (("1" (propax) nil nil)) nil)
     ("2" (skeep)
      (("2" (expand "cinsertion_sort" 1)
        (("2" (lemma "cinsert_length")
          (("2" (inst?)
            (("2" (replaces -1)
              (("2" (replaces -1)
                (("2" (assert)
                  (("2" (expand "length" 1 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cinsert_length formula-decl nil ISort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cinsertion_sort def-decl "[list[nat], nat]" ISort nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_cinsertion_sort_ws_general 0
  (count_cinsertion_sort_ws_general-2 "with induction" 3781377422
   ("" (induct "l")
    (("1" (expand "cinsertion_sort")
      (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (expand "length" 1)
        (("2" (expand "cinsertion_sort" 1)
          (("2" (lemma "count_cinsert_ws_general")
            (("2" (inst -1 "cons1_var" "_")
              (("2" (inst -1 "cinsertion_sort(cons2_var)")
                (("2" (lemma "le_cut")
                  (("2"
                    (inst -1
                     "cinsert(cons1_var, cinsertion_sort(cons2_var))`2"
                     "cinsertion_sort(cons2_var)`2 + length(cinsertion_sort(cons2_var)`1)"
                     "(length[nat](cons2_var) +
         length[nat](cons2_var) * length[nat](cons2_var))
        / 2")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (hide -1 2)
                        (("3" (lemma "cinsertion_sort_length")
                          (("3" (inst?)
                            (("3" (replaces -1)
                              (("3"
                                (lemma "le_cut")
                                (("3"
                                  (inst
                                   -1
                                   "cinsertion_sort(cons2_var)`2 + length(cons2_var)"
                                   "length(cons2_var) + (length(cons2_var) * (length(cons2_var) - 1)) / 2"
                                   "(length[nat](cons2_var) +
         length[nat](cons2_var) * length[nat](cons2_var))
        / 2
")
                                  (("3"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (hide -1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_cut formula-decl nil extra_real_props nil)
    (cinsertion_sort_length formula-decl nil ISort nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (cinsert def-decl "[list[nat], nat]" ISort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (count_cinsert_ws_general formula-decl nil ISort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cinsertion_sort def-decl "[list[nat], nat]" ISort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak)
  (count_cinsertion_sort_ws_general-1 nil 3780946692
   ("" (skeep)
    (("" (expand "cinsertion_sort")
      (("" (case "null?(l)")
        (("1" (assert) (("1" (grind) nil nil)) nil)
         ("2" (assert) (("2" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (pol2_is_quadratic_TCC1 0
  (pol2_is_quadratic_TCC1-1 nil 3782725741 ("" (subtype-tcc) nil nil)
   nil nil))
 (pol2_is_quadratic_TCC2 0
  (pol2_is_quadratic_TCC2-1 nil 3782725741 ("" (subtype-tcc) nil nil)
   nil nil))
 (pol2_is_quadratic 0
  (pol2_is_quadratic-1 nil 3782725757
   ("" (expand "member")
    (("" (expand "Omicron")
      (("" (inst 1 "1/2" "0")
        (("" (skeep) (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (member const-decl "bool" sets nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (insertion_sort_is_quadratic_TCC1 0
  (insertion_sort_is_quadratic_TCC1-1 nil 3780763949
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil))
 (insertion_sort_is_quadratic 0
  (insertion_sort_is_quadratic-1 nil 3780777886
   ("" (expand "member")
    (("" (expand "Omicron")
      (("" (skeep)
        (("" (inst 1 "1/2" "0")
          (("" (skeep)
            (("" (lemma "count_cinsertion_sort_ws_general")
              (("" (inst?)
                (("" (lemma "le_cut")
                  ((""
                    (inst -1 " cinsertion_sort(l)`2"
                     "(length(l) * (length(l) - 1)) / 2"
                     "1 / 2 * length(l) ^ 2")
                    (("" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (hide -1 2)
                        (("3" (assert) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_exp application-judgement "nat" exponentiation nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (count_cinsertion_sort_ws_general formula-decl nil ISort nil)
    (le_cut formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (cinsertion_sort def-decl "[list[nat], nat]" ISort nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (member const-decl "bool" sets nil))
   shostak)))

