(bubblesort
 (bubbling_TCC1 0
  (bubbling_TCC1-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC2 0
  (bubbling_TCC2-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC3 0
  (bubbling_TCC3-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC4 0
  (bubbling_TCC4-1 nil 3783543636 ("" (termination-tcc) nil nil) nil
   nil))
 (bubbling_TCC5 0
  (bubbling_TCC5-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC6 0
  (bubbling_TCC6-1 nil 3783543636 ("" (termination-tcc) nil nil) nil
   nil))
 (cbubbling_TCC1 0
  (cbubbling_TCC1-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (cbubbling_TCC2 0
  (cbubbling_TCC2-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (cbubbling_TCC3 0
  (cbubbling_TCC3-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (cbubbling_TCC4 0
  (cbubbling_TCC4-1 nil 3783543636 ("" (termination-tcc) nil nil) nil
   nil))
 (cbubbling_TCC5 0
  (cbubbling_TCC5-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil nil))
 (cbubbling_TCC6 0
  (cbubbling_TCC6-1 nil 3783543636 ("" (termination-tcc) nil nil) nil
   nil))
 (bubblesort_aux_TCC1 0
  (bubblesort_aux_TCC1-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil
   nil))
 (bubblesort_aux_TCC2 0
  (bubblesort_aux_TCC2-1 nil 3783543636 ("" (termination-tcc) nil nil)
   nil nil))
 (cbubblesort_aux_TCC1 0
  (cbubblesort_aux_TCC1-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil
   nil))
 (cbubblesort_aux_TCC2 0
  (cbubblesort_aux_TCC2-1 nil 3783543636 ("" (termination-tcc) nil nil)
   nil nil))
 (bubblesort_TCC1 0
  (bubblesort_TCC1-1 nil 3783543636 ("" (subtype-tcc) nil nil) nil
   nil))
 (bubbling_cbubbling_equi_TCC1 0
  (bubbling_cbubbling_equi_TCC1-1 nil 3784131245
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_is_quadratic_TCC1 0
  (bubblesort_is_quadratic_TCC1-1 nil 3783543636
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_is_quadratic 0
  (bubblesort_is_quadratic-1 nil 3783543661
   ("" (expand "member")
    (("" (expand "Omicron")
      (("" (skeep)
        (("" (inst 1 "1/2" "0")
          (("" (skeep)
            (("" (lemma "count_cbubblesort_ws_general")
              (("" (inst?)
                (("" (lemma "le_cut")
                  ((""
                    (inst -1 "cbubblesort(l)`2"
                     "(length(l) * (length(l)-1))/2"
                     "1/2 * length(l)^2")
                    (("" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (hide -1 2)
                        (("3" (assert) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_exp application-judgement "nat" exponentiation nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (count_cbubblesort_ws_general formula-decl nil bubblesort nil)
    (le_cut formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (cbubblesort const-decl "[list[nat], nat]" bubblesort nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (member const-decl "bool" sets nil))
   shostak)))

