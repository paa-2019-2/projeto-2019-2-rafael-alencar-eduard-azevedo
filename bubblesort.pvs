%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Flavio L.C. de Moura
%%% Last modification:  April 28 2015
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort : THEORY
BEGIN

IMPORTING   sorting 
IMPORTING complexity

l,l1,l2 : VAR list[nat]
i,j,k,n : VAR nat
lc		: VAR [list[nat], nat]

% This is the bubbling function that moves the greates key in
% the n-prefix of a list l to the n-th position of the list.
bubbling(l, ( n : below[ l`length])) : RECURSIVE  list[nat] =
IF n = 0 THEN l
ELSIF car(l) > car(cdr(l)) THEN cons(car(cdr(l)), bubbling(cons(car(l),cdr(cdr(l))), n - 1))
ELSE cons(car(l), bubbling(cdr(l), n - 1))
ENDIF
MEASURE n   

% Função bubbling com o contador
cbubbling(lc, ( n : below[ lc`1`length])) : RECURSIVE [list[nat], nat] =
IF n = 0 THEN lc
ELSIF car(lc`1) > car(cdr(lc`1)) THEN (cons(car(cdr(lc`1)), cbubbling((cons(car(lc`1), cdr(cdr(lc`1))), lc`2), n - 1)`1), lc`2 + 1)
ELSE (cons(car(lc`1), cbubbling((cdr(lc`1), lc`2), n - 1)`1), lc`2 + 1)
ENDIF
MEASURE n

% This is the auxiliary function that calls bubbling addequately
% starting from n. The result is that the first n+1 elements of the
% given input list will be sorted. 
bubblesort_aux(l, ( n : below[l`length ] )) : RECURSIVE list[nat] =
IF n = 0 THEN l
ELSE bubblesort_aux(bubbling(l, n), n-1)
ENDIF
MEASURE n

% Função bubblesort_aux com o contador
cbubblesort_aux(lc, ( n : below[lc`1`length])) : RECURSIVE [list[nat], nat] =
IF n = 0 THEN lc
ELSE cbubblesort_aux(cbubbling(lc, n), n-1)
ENDIF
MEASURE n

% This is the main function which calls the auxiliary function
% bubblesort_aux starting from length of the input list minus one.  
% As result, bubblesort_aux will sort the whole input list.
bubblesort(l) : list[nat] = 
IF null?(l) THEN l
ELSE bubblesort_aux(l, l`length - 1 )
ENDIF

% Função bubblesort com contador
cbubblesort(l) : [list[nat], nat] =
IF null?(l) THEN (l,0)
ELSE cbubblesort_aux((l, 0), l`length - 1)
ENDIF


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%        Lemas        %%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Lema bubblesor_aux eh equivalente a cbubblesort_aux
bubblesort_aux_cbubblesort_aux: LEMMA
 FORALL(l:list[nat], n:below[l`length]) (c:nat):
       bubblesort_aux(l,n) = cbubblesort_aux(lc,n)`1


% Lema bubblesort eh equivalente a cbubblesort
bubblesort_cbubblesort_equi: LEMMA
 FORALL(l: list[nat]):
 	   bubblesort(l) = cbubblesort(l)`1

% Lema cbubbling eh equivalente a cbubbling
bubbling_cbubbling_equi: LEMMA
 FORALL (l:list[nat]) (n: below[l`length]):
 	bubbling(l,n) = cbubbling(lc,n)`1


% Lema tamanho do cbubblesort
cbubblesort_length: LEMMA
 FORALL (l:list[nat]): length(cbubblesort(l)`1) = length(l)

% Lema count_cbubblesort_ws_general
count_cbubblesort_ws_general: LEMMA
 FORALL (l:list[nat]): cbubblesort(l)`2 <= (length(l) * (length(l) - 1))/2


% Lema bubblersort eh quadratico
bubblesort_is_quadratic: LEMMA
 FORALL (l:list[nat]):
 member(LAMBDA(n:nat): cbubblesort(l)`2, Omicron(LAMBDA(n:nat):length(l)^2 ))

END bubblesort
