ISort: THEORY
      BEGIN

IMPORTING complexity

insert(x:nat,l:list[nat]) : RECURSIVE list[nat] =
			  CASES l OF
			  	null: cons(x,null),
				cons(h,tl): IF x <= h
					    THEN cons(x,l)
					    	 ELSE cons(h,insert(x,tl))
						 ENDIF
						 ENDCASES
						 MEASURE length(l)

cinsert (x:nat, lc:[list[nat],nat]): RECURSIVE [list[nat],nat] =
	IF null?(lc`1) THEN (cons(x,lc`1),lc`2)
	ELSIF x <= car(lc`1) THEN (cons(x,lc`1), lc`2 + 1) 
	ELSE LET lcaux = cinsert(x,(cdr(lc`1),lc`2)) IN
	(cons(car(lc`1), lcaux`1), lcaux`2 + 1)
ENDIF 
MEASURE length(lc`1)

cinsert_length: LEMMA
			FORALL (x:nat) (lc:[list[nat],nat]): length(cinsert(x,lc)`1) = 1 + length(lc`1)

insert_cinsert_equiv: LEMMA
		      FORALL (x, n:nat) (l:list[nat]):
		     	    insert(x,l) = cinsert(x, (l,n))`1

count_cinsert_ws: LEMMA
		  FORALL (x:nat) (l:list[nat]): (FORALL (i:below(length(l))): x > (nth(l,i))) IMPLIES cinsert(x,(l,0))`2 = length(l)

count_cinsert_ws_general: LEMMA
		  FORALL (x:nat) (lc:[list[nat],nat]): cinsert(x,lc)`2 <= lc`2 + length(lc`1)

insertion_sort(l:list[nat]) : RECURSIVE list[nat] =
		   CASES l OF
		   null: l,
		   cons(h,tl): insert(h, insertion_sort(tl))
		   ENDCASES
		   MEASURE length(l)

cinsertion_sort(l: list[nat]): RECURSIVE [list[nat],nat] = 
IF null?(l) THEN (null,0)
   ELSE cinsert(car(l), cinsertion_sort(cdr(l)))
ENDIF
MEASURE length(l)

cinsertion_sort_equiv: LEMMA
		      FORALL (l:list[nat]):
		     	    insertion_sort(l) = cinsertion_sort(l)`1

cinsertion_sort_length: LEMMA
			FORALL (l:list[nat]): length(cinsertion_sort(l)`1) = length(l)

count_cinsertion_sort_ws_general: LEMMA
		  FORALL (l:list[nat]): cinsertion_sort(l)`2 <= (length(l) * (length(l) - 1))/2


insertion_sort_is_quadratic: LEMMA
 FORALL (l:list[nat]):
 member(LAMBDA(n:nat): cinsertion_sort(l)`2, Omicron(LAMBDA(n:nat):length(l)^2 ))

END ISort
