%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Flavio L.C. de Moura
%%% Last modification:  April 28 2015
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort : THEORY
BEGIN

IMPORTING   sorting 
IMPORTING complexity

l,l1,l2 : VAR list[nat]
i,j,k,n : VAR nat
lc		: VAR [list[nat], nat]

% This is the bubbling function that moves the greates key in
% the n-prefix of a list l to the n-th position of the list. 
bubbling(l, ( n : below[ l`length])) : RECURSIVE  list[nat] =
IF n = 0 THEN l
ELSIF car(l) > car(cdr(l)) THEN cons(car(cdr(l)), bubbling(cons(car(l),cdr(cdr(l))), n - 1))
ELSE cons(car(l), bubbling(cdr(l), n - 1))
ENDIF
MEASURE n   

% Função bubbling com o contador
cbubbling(lc, ( n : below[ lc`1`length])) : RECURSIVE [list[nat], nat] =
IF n = 0 THEN lc
ELSIF car(lc`1) > car(cdr(lc`1)) THEN cons(car(cdr(lc`1)), lc`2 + 1, cbubbling(cons(car(lc`1), cdr(cdr(lc`1))), n - 1))
ELSE cons(car(lc`1), lc`2 + 1, cbubbling(cdr(lc`1), n - 1))
ENDIF
MEASURE n

% This is the auxiliary function that calls bubbling addequately
% starting from n. The result is that the first n+1 elements of the
% given input list will be sorted. 
bubblesort_aux(l, ( n : below[l`length ] )) : RECURSIVE list[nat] =
IF n = 0 THEN l
ELSE bubblesort_aux(bubbling(l, n), n-1)
ENDIF
MEASURE n

% Função bubblesort_aux com o contador
cbubblesort_aux(lc, ( n : below[lc`1`length])) : RECURSIVE [list[nat], nat] =
IF n = 0 THEN lc
ELSE bubblesort_aux(cbubbling(lc, n), n-1)
ENDIF
MEASURE n

% This is the main function which calls the auxiliary function
% bubblesort_aux starting from length of the input list minus one.  
% As result, bubblesort_aux will sort the whole input list.
bubblesort(l) : list[nat] = 
IF null?(l) THEN l
ELSE bubblesort_aux(l, l`length - 1 )
ENDIF

% Função bubblesort com contador
cbubblesort(lc) : [list[nat], nat] =
IF null?(lc) THEN lc
ELSE cbubblesort_aux(lc, lc`1`length - 1)
ENDIF

% Lema bubblersort eh quadratico
bubblesort_is_quadratic: LEMMA
 FORALL (lc:list[nat]):
 member(LAMBDA(n:nat): cbubblesort(lc)`2, Omicron(LAMBDA(n:nat):length(lc)^2 ))

END bubblesort
